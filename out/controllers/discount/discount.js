"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const scenes_1 = require("../scenes");
const users_model_1 = require("../../models/users/users.model");
var KeyboardAction;
(function (KeyboardAction) {
    KeyboardAction["create_discount"] = "create_discount";
    KeyboardAction["discount_list"] = "discount_list";
    KeyboardAction["create_coupon"] = "create_coupon";
    KeyboardAction["request_contact"] = "request_contact";
    KeyboardAction["discount_confirm"] = "discount_confirm";
    KeyboardAction["discount_cancel"] = "discount_cancel";
    KeyboardAction["back_menu"] = "back_to_menu";
})(KeyboardAction || (KeyboardAction = {}));
var DiscountRequested;
(function (DiscountRequested) {
    DiscountRequested[DiscountRequested["none"] = 0] = "none";
    DiscountRequested[DiscountRequested["user"] = 1] = "user";
    DiscountRequested[DiscountRequested["amount"] = 2] = "amount";
})(DiscountRequested || (DiscountRequested = {}));
const keyboards = telegraf_1.Markup.inlineKeyboard([
    [telegraf_1.Markup.callbackButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', KeyboardAction.create_discount)],
    [telegraf_1.Markup.callbackButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫', KeyboardAction.discount_list)],
    [telegraf_1.Markup.callbackButton('–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω', KeyboardAction.create_coupon)],
    [telegraf_1.Markup.callbackButton('–ù–∞–∑–∞–¥', KeyboardAction.back_menu)]
]);
const discountScene = new telegraf_1.BaseScene(scenes_1.Scene.discountSettings);
// let state: DiscountRequested
// let userForDiscount: IUserDocument
// let discountAmount: number
discountScene.enter((ctx) => {
    ctx.editMessageText('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–∫–∏–¥–∫—É –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É.', keyboards.extra());
    ctx.session.state = DiscountRequested.none;
    ctx.session.userForDiscount = undefined;
    ctx.session.discountAmount = undefined;
});
discountScene.action(KeyboardAction.create_discount, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.state = DiscountRequested.user;
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–∫–∏–¥–∫—É.\n\n–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å" -> "–ö–æ–Ω—Ç–∞–∫—Ç"\n(–≤–∞–∂–Ω–æ: —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚òùÔ∏è)\n\n–õ–∏–±–æ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º—è, —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ –Ω–∞–π—Ç–∏ ü§ì');
}));
discountScene.on('text', (ctx) => {
    var _a;
    const text = ((_a = ctx.message) === null || _a === void 0 ? void 0 : _a.text) || undefined;
    if (!text)
        return;
    if (ctx.session.state == DiscountRequested.user) {
        const names = text.split(' ');
        console.log(names);
        users_model_1.UserModel.find({ 'firstName': names[0], 'lastName': names[1] }).exec((error, users) => __awaiter(void 0, void 0, void 0, function* () {
            if (error)
                return; // handle
            if (users.length == 0) { // not found
                ctx.reply('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–æ–≥–æ –ø–æ —Ç–∞–∫–æ–º—É –∏–º–µ–Ω–∏ üòî');
            }
            else if (users.length > 1) { // found more than one
                ctx.reply('–ú—ã –Ω–∞—à–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∞–∫–æ–º—É –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è üßê');
            }
            else { // exactly one
                let user = ctx.session.userForDiscount = users[0];
                const name = `${user.firstName} ${user.lastName}`;
                if (user.discount > 0) {
                    const currentDiscount = user.discount.valueOf() * 100;
                    ctx.reply(`${name} —É–∂–µ –∏–º–µ–µ—Ç —Å–∫–∏–¥–∫—É –≤ ${currentDiscount}%. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É –æ—Ç 0 –¥–æ 100%.`);
                }
                else {
                    ctx.reply(`–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –¥–ª—è ${name}. –û—Ç 0 –¥–æ 100%.`);
                }
                ctx.session.state = DiscountRequested.amount;
            }
        }));
    }
    else if (ctx.session.state == DiscountRequested.amount) {
        const amount = Number.parseInt(text);
        if (isNaN(amount) || amount < 0 || amount > 100) {
            // not correct
            ctx.reply(`–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%`);
        }
        else {
            ctx.session.discountAmount = amount;
            const keyboards = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.callbackButton('–û–π, –∑–∞—Ç—É–ø–∏–ª ü§¶‚Äç‚ôÇÔ∏è', KeyboardAction.discount_cancel),
                    telegraf_1.Markup.callbackButton('–î–∞, –≤—Å–µ —Ç–∞–∫ üëå', KeyboardAction.discount_confirm)]
            ]).extra();
            const name = `${ctx.session.userForDiscount.firstName} ${ctx.session.userForDiscount.lastName}`;
            ctx.reply(`–¢–∞–∫, –¥–∞–≤–∞–π –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º. –¢—ã —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è ${name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${amount}%?`, keyboards);
        }
    }
});
discountScene.on('contact', (ctx) => {
    var _a, _b;
    if (ctx.session.state != DiscountRequested.user)
        return;
    const userId = (_b = (_a = ctx.message) === null || _a === void 0 ? void 0 : _a.contact) === null || _b === void 0 ? void 0 : _b.user_id;
    console.log(ctx.message);
    if (userId == undefined)
        return;
    users_model_1.UserModel.findOne({ 'chatId': userId.toString() }).exec((error, user) => __awaiter(void 0, void 0, void 0, function* () {
        if (error) {
            console.log('error with UserModel.findOne: ' + userId);
        } // handle
        if (user) {
            ctx.session.userForDiscount = user;
            ctx.reply(`–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –¥–ª—è ${user.firstName} ${user.lastName}. –û—Ç 0 –¥–æ 100%.`);
            ctx.session.state = DiscountRequested.amount;
        }
        else {
            ctx.reply('–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ üòí');
        }
    }));
});
discountScene.action(KeyboardAction.discount_confirm, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.state = DiscountRequested.none;
    ctx.session.userForDiscount.discount = ctx.session.discountAmount / 100;
    const user = ctx.session.userForDiscount;
    user.updateOne(user).exec((error, user) => __awaiter(void 0, void 0, void 0, function* () {
        if (error)
            return; // todo handle error
        ctx.reply('–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üòâ');
    }));
}));
discountScene.action(KeyboardAction.discount_cancel, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.session.state = DiscountRequested.none;
    ctx.reply('–§—É—Ö, —è —Ç–æ —É–∂–µ –¥—É–º–∞–ª üò¨');
}));
discountScene.action(KeyboardAction.discount_list, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    users_model_1.UserModel.find({}).exec((error, users) => __awaiter(void 0, void 0, void 0, function* () {
        if (error)
            return;
        let list = '';
        let i = 0;
        users.forEach(u => {
            if (u.discount > 0)
                list += `${++i}. ${u.firstName} ${u.lastName} ‚Äì‚Äì ${u.discount.valueOf() * 100}%\n`;
        });
        ctx.reply(list);
    }));
}));
discountScene.action(KeyboardAction.create_coupon, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
}));
discountScene.action(KeyboardAction.back_menu, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    scenes_1.SceneManager.back(ctx);
}));
exports.default = discountScene;
//# sourceMappingURL=discount.js.map