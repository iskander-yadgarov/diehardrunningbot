import { BaseScene, Markup, Extra } from "telegraf"
import { SceneContextMessageUpdate } from "telegraf/typings/stage"
import strings from '../../resources/strings'
import { Scene } from '../scenes'
import { UserModel } from '../../models/users/users.model'
import { IUser, IUserDocument } from "../../models/users/users.types"
import { DiscountModel } from "../../models/discounts/discounts.model"
import UserSchema from "../../models/users/users.schema"

enum KeyboardAction {
    create_discount = 'create_discount',
    discount_list = 'discount_list',
    create_coupon = 'create_coupon',
    request_contact = 'request_contact',
    discount_confirm = 'discount_confirm',
    discount_cancel = 'discount_cancel',
    back_menu = 'back_to_menu'
}

enum DiscountRequested {
    none,
    user,
    amount
}

const keyboards = Markup.inlineKeyboard([
    [Markup.callbackButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', KeyboardAction.create_discount)],
    [Markup.callbackButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫', KeyboardAction.discount_list)],
    [Markup.callbackButton('–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω', KeyboardAction.create_coupon)],
    [Markup.callbackButton('–ù–∞–∑–∞–¥', KeyboardAction.back_menu)]
])

const discountScene = new BaseScene(Scene.discountSettings)

// let state: DiscountRequested
// let userForDiscount: IUserDocument
// let discountAmount: number

discountScene.enter((ctx: SceneContextMessageUpdate) => {
    ctx.editMessageText('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–∫–∏–¥–∫—É –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É.', keyboards.extra())
    ctx.session.state = DiscountRequested.none
    ctx.session.userForDiscount = undefined
    ctx.session.discountAmount = undefined
})

discountScene.action(KeyboardAction.create_discount, async (ctx: SceneContextMessageUpdate) => {
    ctx.session.state = DiscountRequested.user
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–∫–∏–¥–∫—É.\n\n–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å" -> "–ö–æ–Ω—Ç–∞–∫—Ç"\n(–≤–∞–∂–Ω–æ: —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚òùÔ∏è)\n\n–õ–∏–±–æ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º—è, —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ –Ω–∞–π—Ç–∏ ü§ì')
})

discountScene.on('text', (ctx: SceneContextMessageUpdate) => {

    const text = ctx.message?.text || undefined
    if (!text) return

    if (ctx.session.state == DiscountRequested.user) {
        const names = text.split(' ')
        console.log(names)
        UserModel.find({'firstName': names[0], 'lastName': names[1]}).exec( async(error, users) => {
            if (error) return // handle

            if (users.length == 0) { // not found
                ctx.reply('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–æ–≥–æ –ø–æ —Ç–∞–∫–æ–º—É –∏–º–µ–Ω–∏ üòî')
            } else if (users.length > 1) { // found more than one
                ctx.reply('–ú—ã –Ω–∞—à–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∞–∫–æ–º—É –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è üßê')
            } else { // exactly one
                let user = ctx.session.userForDiscount = users[0]
                const name = `${user.firstName} ${user.lastName}`
                if (user.discount > 0) {
                    const currentDiscount = user.discount.valueOf() * 100
                    ctx.reply(`${name} —É–∂–µ –∏–º–µ–µ—Ç —Å–∫–∏–¥–∫—É –≤ ${currentDiscount}%. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É –æ—Ç 0 –¥–æ 100%.`)
                } else {
                    ctx.reply(`–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –¥–ª—è ${name}. –û—Ç 0 –¥–æ 100%.`)
                }
                ctx.session.state = DiscountRequested.amount
            }
        })
    } else if (ctx.session.state == DiscountRequested.amount) {
        const amount = Number.parseInt(text)
        if (isNaN(amount) || amount < 0 || amount > 100) {
            // not correct
            ctx.reply(`–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%`)
        } else {
            ctx.session.discountAmount = amount
            const keyboards = Markup.inlineKeyboard([
                [Markup.callbackButton('–û–π, –∑–∞—Ç—É–ø–∏–ª ü§¶‚Äç‚ôÇÔ∏è', KeyboardAction.discount_cancel),
                Markup.callbackButton('–î–∞, –≤—Å–µ —Ç–∞–∫ üëå', KeyboardAction.discount_confirm)]
            ]).extra()
            const name = `${ctx.session.userForDiscount.firstName} ${ctx.session.userForDiscount.lastName}`
            ctx.reply(`–¢–∞–∫, –¥–∞–≤–∞–π –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º. –¢—ã —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è ${name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${amount}%?`, keyboards)
        }
    }
})

discountScene.on('contact', (ctx: SceneContextMessageUpdate) => {
    if (ctx.session.state != DiscountRequested.user) return

    const userId = ctx.message?.contact?.user_id
    console.log(ctx.message)
    if (userId == undefined) return

    UserModel.findOne({'chatId': userId.toString()}).exec(async (error, user) => {
        if (error) { console.log('error with UserModel.findOne: ' + userId) }  // handle

        if (user) {
            ctx.session.userForDiscount = user
            ctx.reply(`–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –¥–ª—è ${user.firstName} ${user.lastName}. –û—Ç 0 –¥–æ 100%.`)
            ctx.session.state = DiscountRequested.amount
        } else {
            ctx.reply('–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ üòí')
        }
    })
})

discountScene.action(KeyboardAction.discount_confirm, async (ctx: SceneContextMessageUpdate) => {

    ctx.session.state = DiscountRequested.none
    ctx.session.userForDiscount.discount = ctx.session.discountAmount / 100
    const user = ctx.session.userForDiscount as IUserDocument
    user.updateOne(user).exec( async(error, user) => {
        if (error) return // todo handle error
        ctx.reply('–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üòâ')
    })
})

discountScene.action(KeyboardAction.discount_cancel, async (ctx: SceneContextMessageUpdate) => {
    ctx.session.state = DiscountRequested.none
    ctx.reply('–§—É—Ö, —è —Ç–æ —É–∂–µ –¥—É–º–∞–ª üò¨')
})

discountScene.action(KeyboardAction.discount_list, async (ctx: SceneContextMessageUpdate) => {

    UserModel.find({}).exec( async(error, users) => {
        if (error) return

        let list = ''
        let i = 0
        users.forEach(u => {
            if (u.discount > 0) list += `${++i}. ${u.firstName} ${u.lastName} ‚Äì‚Äì ${u.discount.valueOf() * 100}%\n`
        })
        ctx.reply(list)
    })

})

discountScene.action(KeyboardAction.create_coupon, async (ctx: SceneContextMessageUpdate) => {

})

discountScene.action(KeyboardAction.back_menu, async (ctx: SceneContextMessageUpdate) => {
  ctx.scene.enter(Scene.menu)
})

export default discountScene
